/**
 * s4s-full
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.S4sError;
import io.swagger.client.model.CustomerPack;
import io.swagger.client.model.CustomerPackSubscription;
import io.swagger.client.model.ProductConf;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SsProductApi {
    private ApiClient apiClient;

    public SsProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SsProductApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for customerEnjoyAdd */
    private com.squareup.okhttp.Call customerEnjoyAddCall(String customerId, Long expirationOffset, String overrideEnjoyId, String overrideSubscriptionId, CustomerPack newEnjoy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newEnjoy;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerEnjoyAdd(Async)");
        }
        
        // verify the required parameter 'expirationOffset' is set
        if (expirationOffset == null) {
            throw new ApiException("Missing the required parameter 'expirationOffset' when calling customerEnjoyAdd(Async)");
        }
        
        // verify the required parameter 'overrideEnjoyId' is set
        if (overrideEnjoyId == null) {
            throw new ApiException("Missing the required parameter 'overrideEnjoyId' when calling customerEnjoyAdd(Async)");
        }
        
        // verify the required parameter 'overrideSubscriptionId' is set
        if (overrideSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'overrideSubscriptionId' when calling customerEnjoyAdd(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/enjoy".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expirationOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expiration-offset", expirationOffset));
        if (overrideEnjoyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "override-enjoy-id", overrideEnjoyId));
        if (overrideSubscriptionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "override-subscription-id", overrideSubscriptionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Relationate a new product with the customer
     * @param customerId The given id from the user service (required)
     * @param expirationOffset  (required)
     * @param overrideEnjoyId  (required)
     * @param overrideSubscriptionId  (required)
     * @param newEnjoy  (optional)
     * @return CustomerPack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerPack customerEnjoyAdd(String customerId, Long expirationOffset, String overrideEnjoyId, String overrideSubscriptionId, CustomerPack newEnjoy) throws ApiException {
        ApiResponse<CustomerPack> resp = customerEnjoyAddWithHttpInfo(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, newEnjoy);
        return resp.getData();
    }

    /**
     * 
     * Relationate a new product with the customer
     * @param customerId The given id from the user service (required)
     * @param expirationOffset  (required)
     * @param overrideEnjoyId  (required)
     * @param overrideSubscriptionId  (required)
     * @param newEnjoy  (optional)
     * @return ApiResponse&lt;CustomerPack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerPack> customerEnjoyAddWithHttpInfo(String customerId, Long expirationOffset, String overrideEnjoyId, String overrideSubscriptionId, CustomerPack newEnjoy) throws ApiException {
        com.squareup.okhttp.Call call = customerEnjoyAddCall(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, newEnjoy, null, null);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Relationate a new product with the customer
     * @param customerId The given id from the user service (required)
     * @param expirationOffset  (required)
     * @param overrideEnjoyId  (required)
     * @param overrideSubscriptionId  (required)
     * @param newEnjoy  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerEnjoyAddAsync(String customerId, Long expirationOffset, String overrideEnjoyId, String overrideSubscriptionId, CustomerPack newEnjoy, final ApiCallback<CustomerPack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerEnjoyAddCall(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, newEnjoy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerEnjoyClose */
    private com.squareup.okhttp.Call customerEnjoyCloseCall(String customerId, String enjoyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerEnjoyClose(Async)");
        }
        
        // verify the required parameter 'enjoyId' is set
        if (enjoyId == null) {
            throw new ApiException("Missing the required parameter 'enjoyId' when calling customerEnjoyClose(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}/close".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "enjoy-id" + "\\}", apiClient.escapeString(enjoyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
     * @param customerId The given id from the user service (required)
     * @param enjoyId  (required)
     * @return CustomerPack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerPack customerEnjoyClose(String customerId, String enjoyId) throws ApiException {
        ApiResponse<CustomerPack> resp = customerEnjoyCloseWithHttpInfo(customerId, enjoyId);
        return resp.getData();
    }

    /**
     * 
     * Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
     * @param customerId The given id from the user service (required)
     * @param enjoyId  (required)
     * @return ApiResponse&lt;CustomerPack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerPack> customerEnjoyCloseWithHttpInfo(String customerId, String enjoyId) throws ApiException {
        com.squareup.okhttp.Call call = customerEnjoyCloseCall(customerId, enjoyId, null, null);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
     * @param customerId The given id from the user service (required)
     * @param enjoyId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerEnjoyCloseAsync(String customerId, String enjoyId, final ApiCallback<CustomerPack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerEnjoyCloseCall(customerId, enjoyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerEnjoyGet */
    private com.squareup.okhttp.Call customerEnjoyGetCall(String customerId, String enjoyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerEnjoyGet(Async)");
        }
        
        // verify the required parameter 'enjoyId' is set
        if (enjoyId == null) {
            throw new ApiException("Missing the required parameter 'enjoyId' when calling customerEnjoyGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "enjoy-id" + "\\}", apiClient.escapeString(enjoyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Get a certain product releated to customer
     * @param customerId The given id from the user service (required)
     * @param enjoyId  (required)
     * @return CustomerPack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerPack customerEnjoyGet(String customerId, String enjoyId) throws ApiException {
        ApiResponse<CustomerPack> resp = customerEnjoyGetWithHttpInfo(customerId, enjoyId);
        return resp.getData();
    }

    /**
     * 
     * Get a certain product releated to customer
     * @param customerId The given id from the user service (required)
     * @param enjoyId  (required)
     * @return ApiResponse&lt;CustomerPack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerPack> customerEnjoyGetWithHttpInfo(String customerId, String enjoyId) throws ApiException {
        com.squareup.okhttp.Call call = customerEnjoyGetCall(customerId, enjoyId, null, null);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a certain product releated to customer
     * @param customerId The given id from the user service (required)
     * @param enjoyId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerEnjoyGetAsync(String customerId, String enjoyId, final ApiCallback<CustomerPack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerEnjoyGetCall(customerId, enjoyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerEnjoyGetAll */
    private com.squareup.okhttp.Call customerEnjoyGetAllCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerEnjoyGetAll(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/enjoy".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Get all the current products relationed with the customer
     * @param customerId The given id from the user service (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> customerEnjoyGetAll(String customerId) throws ApiException {
        ApiResponse<List<String>> resp = customerEnjoyGetAllWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * 
     * Get all the current products relationed with the customer
     * @param customerId The given id from the user service (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> customerEnjoyGetAllWithHttpInfo(String customerId) throws ApiException {
        com.squareup.okhttp.Call call = customerEnjoyGetAllCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the current products relationed with the customer
     * @param customerId The given id from the user service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerEnjoyGetAllAsync(String customerId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerEnjoyGetAllCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerEnjoySpend */
    private com.squareup.okhttp.Call customerEnjoySpendCall(String customerId, String customerPackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerEnjoySpend(Async)");
        }
        
        // verify the required parameter 'customerPackId' is set
        if (customerPackId == null) {
            throw new ApiException("Missing the required parameter 'customerPackId' when calling customerEnjoySpend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/enjoy/{customer-pack-id}/spend".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "customer-pack-id" + "\\}", apiClient.escapeString(customerPackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param customerPackId  (required)
     * @return Map&lt;String, Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Long> customerEnjoySpend(String customerId, String customerPackId) throws ApiException {
        ApiResponse<Map<String, Long>> resp = customerEnjoySpendWithHttpInfo(customerId, customerPackId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param customerPackId  (required)
     * @return ApiResponse&lt;Map&lt;String, Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Long>> customerEnjoySpendWithHttpInfo(String customerId, String customerPackId) throws ApiException {
        com.squareup.okhttp.Call call = customerEnjoySpendCall(customerId, customerPackId, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param customerPackId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerEnjoySpendAsync(String customerId, String customerPackId, final ApiCallback<Map<String, Long>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerEnjoySpendCall(customerId, customerPackId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerEnjoyValues */
    private com.squareup.okhttp.Call customerEnjoyValuesCall(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerEnjoyValues(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerEnjoyValues(Async)");
        }
        
        // verify the required parameter 'numberPerPage' is set
        if (numberPerPage == null) {
            throw new ApiException("Missing the required parameter 'numberPerPage' when calling customerEnjoyValues(Async)");
        }
        
        // verify the required parameter 'loadResourceStatusList' is set
        if (loadResourceStatusList == null) {
            throw new ApiException("Missing the required parameter 'loadResourceStatusList' when calling customerEnjoyValues(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/enjoy/values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (numberPerPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "number-per-page", numberPerPage));
        if (loadResourceStatusList != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "load-resource-status-list", loadResourceStatusList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerEnjoyValues(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList) throws ApiException {
        customerEnjoyValuesWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerEnjoyValuesWithHttpInfo(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList) throws ApiException {
        com.squareup.okhttp.Call call = customerEnjoyValuesCall(customerId, page, numberPerPage, loadResourceStatusList, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerEnjoyValuesAsync(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerEnjoyValuesCall(customerId, page, numberPerPage, loadResourceStatusList, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for customerHistoryPackGet */
    private com.squareup.okhttp.Call customerHistoryPackGetCall(String customerId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerHistoryPackGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerHistoryPackGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/history/pack/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param id  (required)
     * @return CustomerPack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerPack customerHistoryPackGet(String customerId, String id) throws ApiException {
        ApiResponse<CustomerPack> resp = customerHistoryPackGetWithHttpInfo(customerId, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param id  (required)
     * @return ApiResponse&lt;CustomerPack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerPack> customerHistoryPackGetWithHttpInfo(String customerId, String id) throws ApiException {
        com.squareup.okhttp.Call call = customerHistoryPackGetCall(customerId, id, null, null);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerHistoryPackGetAsync(String customerId, String id, final ApiCallback<CustomerPack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerHistoryPackGetCall(customerId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerHistoryPackGetAll */
    private com.squareup.okhttp.Call customerHistoryPackGetAllCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerHistoryPackGetAll(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/history/pack".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> customerHistoryPackGetAll(String customerId) throws ApiException {
        ApiResponse<List<String>> resp = customerHistoryPackGetAllWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> customerHistoryPackGetAllWithHttpInfo(String customerId) throws ApiException {
        com.squareup.okhttp.Call call = customerHistoryPackGetAllCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerHistoryPackGetAllAsync(String customerId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerHistoryPackGetAllCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerHistoryPackValues */
    private com.squareup.okhttp.Call customerHistoryPackValuesCall(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerHistoryPackValues(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerHistoryPackValues(Async)");
        }
        
        // verify the required parameter 'numberPerPage' is set
        if (numberPerPage == null) {
            throw new ApiException("Missing the required parameter 'numberPerPage' when calling customerHistoryPackValues(Async)");
        }
        
        // verify the required parameter 'loadResourceStatusList' is set
        if (loadResourceStatusList == null) {
            throw new ApiException("Missing the required parameter 'loadResourceStatusList' when calling customerHistoryPackValues(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/history/pack/values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (numberPerPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "number-per-page", numberPerPage));
        if (loadResourceStatusList != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "load-resource-status-list", loadResourceStatusList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerHistoryPackValues(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList) throws ApiException {
        customerHistoryPackValuesWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerHistoryPackValuesWithHttpInfo(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList) throws ApiException {
        com.squareup.okhttp.Call call = customerHistoryPackValuesCall(customerId, page, numberPerPage, loadResourceStatusList, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerHistoryPackValuesAsync(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerHistoryPackValuesCall(customerId, page, numberPerPage, loadResourceStatusList, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for customerHistorySubscriptionGet */
    private com.squareup.okhttp.Call customerHistorySubscriptionGetCall(String customerId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerHistorySubscriptionGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerHistorySubscriptionGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/history/subscription/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param id  (required)
     * @return CustomerPack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerPack customerHistorySubscriptionGet(String customerId, String id) throws ApiException {
        ApiResponse<CustomerPack> resp = customerHistorySubscriptionGetWithHttpInfo(customerId, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param id  (required)
     * @return ApiResponse&lt;CustomerPack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerPack> customerHistorySubscriptionGetWithHttpInfo(String customerId, String id) throws ApiException {
        com.squareup.okhttp.Call call = customerHistorySubscriptionGetCall(customerId, id, null, null);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerHistorySubscriptionGetAsync(String customerId, String id, final ApiCallback<CustomerPack> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerHistorySubscriptionGetCall(customerId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerPack>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerHistorySubscriptionGetAll */
    private com.squareup.okhttp.Call customerHistorySubscriptionGetAllCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerHistorySubscriptionGetAll(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/history/subscription".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> customerHistorySubscriptionGetAll(String customerId) throws ApiException {
        ApiResponse<List<String>> resp = customerHistorySubscriptionGetAllWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> customerHistorySubscriptionGetAllWithHttpInfo(String customerId) throws ApiException {
        com.squareup.okhttp.Call call = customerHistorySubscriptionGetAllCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerHistorySubscriptionGetAllAsync(String customerId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerHistorySubscriptionGetAllCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerHistorySubscriptionValues */
    private com.squareup.okhttp.Call customerHistorySubscriptionValuesCall(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerHistorySubscriptionValues(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerHistorySubscriptionValues(Async)");
        }
        
        // verify the required parameter 'numberPerPage' is set
        if (numberPerPage == null) {
            throw new ApiException("Missing the required parameter 'numberPerPage' when calling customerHistorySubscriptionValues(Async)");
        }
        
        // verify the required parameter 'loadResourceStatusList' is set
        if (loadResourceStatusList == null) {
            throw new ApiException("Missing the required parameter 'loadResourceStatusList' when calling customerHistorySubscriptionValues(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/history/subscription/values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (numberPerPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "number-per-page", numberPerPage));
        if (loadResourceStatusList != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "load-resource-status-list", loadResourceStatusList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerHistorySubscriptionValues(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList) throws ApiException {
        customerHistorySubscriptionValuesWithHttpInfo(customerId, page, numberPerPage, loadResourceStatusList);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerHistorySubscriptionValuesWithHttpInfo(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList) throws ApiException {
        com.squareup.okhttp.Call call = customerHistorySubscriptionValuesCall(customerId, page, numberPerPage, loadResourceStatusList, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadResourceStatusList  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerHistorySubscriptionValuesAsync(String customerId, Integer page, Integer numberPerPage, Boolean loadResourceStatusList, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerHistorySubscriptionValuesCall(customerId, page, numberPerPage, loadResourceStatusList, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for customerResource */
    private com.squareup.okhttp.Call customerResourceCall(String customerId, Integer page, Integer numberPerPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerResource(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerResource(Async)");
        }
        
        // verify the required parameter 'numberPerPage' is set
        if (numberPerPage == null) {
            throw new ApiException("Missing the required parameter 'numberPerPage' when calling customerResource(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/resource".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (numberPerPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "number-per-page", numberPerPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerResource(String customerId, Integer page, Integer numberPerPage) throws ApiException {
        customerResourceWithHttpInfo(customerId, page, numberPerPage);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerResourceWithHttpInfo(String customerId, Integer page, Integer numberPerPage) throws ApiException {
        com.squareup.okhttp.Call call = customerResourceCall(customerId, page, numberPerPage, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerResourceAsync(String customerId, Integer page, Integer numberPerPage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerResourceCall(customerId, page, numberPerPage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for customerSubscriptionAdd */
    private com.squareup.okhttp.Call customerSubscriptionAddCall(String customerId, String overrideSubscriptionId, String overrideEnjoyId, CustomerPackSubscription newSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newSubscription;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerSubscriptionAdd(Async)");
        }
        
        // verify the required parameter 'overrideSubscriptionId' is set
        if (overrideSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'overrideSubscriptionId' when calling customerSubscriptionAdd(Async)");
        }
        
        // verify the required parameter 'overrideEnjoyId' is set
        if (overrideEnjoyId == null) {
            throw new ApiException("Missing the required parameter 'overrideEnjoyId' when calling customerSubscriptionAdd(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/subscription".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (overrideSubscriptionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "override-subscription-id", overrideSubscriptionId));
        if (overrideEnjoyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "override-enjoy-id", overrideEnjoyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Add a new subscription to customer
     * @param customerId The given id from the user service (required)
     * @param overrideSubscriptionId  (required)
     * @param overrideEnjoyId  (required)
     * @param newSubscription  (optional)
     * @return CustomerPackSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerPackSubscription customerSubscriptionAdd(String customerId, String overrideSubscriptionId, String overrideEnjoyId, CustomerPackSubscription newSubscription) throws ApiException {
        ApiResponse<CustomerPackSubscription> resp = customerSubscriptionAddWithHttpInfo(customerId, overrideSubscriptionId, overrideEnjoyId, newSubscription);
        return resp.getData();
    }

    /**
     * 
     * Add a new subscription to customer
     * @param customerId The given id from the user service (required)
     * @param overrideSubscriptionId  (required)
     * @param overrideEnjoyId  (required)
     * @param newSubscription  (optional)
     * @return ApiResponse&lt;CustomerPackSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerPackSubscription> customerSubscriptionAddWithHttpInfo(String customerId, String overrideSubscriptionId, String overrideEnjoyId, CustomerPackSubscription newSubscription) throws ApiException {
        com.squareup.okhttp.Call call = customerSubscriptionAddCall(customerId, overrideSubscriptionId, overrideEnjoyId, newSubscription, null, null);
        Type localVarReturnType = new TypeToken<CustomerPackSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new subscription to customer
     * @param customerId The given id from the user service (required)
     * @param overrideSubscriptionId  (required)
     * @param overrideEnjoyId  (required)
     * @param newSubscription  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSubscriptionAddAsync(String customerId, String overrideSubscriptionId, String overrideEnjoyId, CustomerPackSubscription newSubscription, final ApiCallback<CustomerPackSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSubscriptionAddCall(customerId, overrideSubscriptionId, overrideEnjoyId, newSubscription, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerPackSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerSubscriptionClose */
    private com.squareup.okhttp.Call customerSubscriptionCloseCall(String customerId, String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerSubscriptionClose(Async)");
        }
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customerSubscriptionClose(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/close".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "subscription-id" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String customerSubscriptionClose(String customerId, String subscriptionId) throws ApiException {
        ApiResponse<String> resp = customerSubscriptionCloseWithHttpInfo(customerId, subscriptionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> customerSubscriptionCloseWithHttpInfo(String customerId, String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = customerSubscriptionCloseCall(customerId, subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSubscriptionCloseAsync(String customerId, String subscriptionId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSubscriptionCloseCall(customerId, subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerSubscriptionGet */
    private com.squareup.okhttp.Call customerSubscriptionGetCall(String customerId, String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerSubscriptionGet(Async)");
        }
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customerSubscriptionGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "subscription-id" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Get a subscription by its Ids
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @return CustomerPackSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerPackSubscription customerSubscriptionGet(String customerId, String subscriptionId) throws ApiException {
        ApiResponse<CustomerPackSubscription> resp = customerSubscriptionGetWithHttpInfo(customerId, subscriptionId);
        return resp.getData();
    }

    /**
     * 
     * Get a subscription by its Ids
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @return ApiResponse&lt;CustomerPackSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerPackSubscription> customerSubscriptionGetWithHttpInfo(String customerId, String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = customerSubscriptionGetCall(customerId, subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerPackSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a subscription by its Ids
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSubscriptionGetAsync(String customerId, String subscriptionId, final ApiCallback<CustomerPackSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSubscriptionGetCall(customerId, subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerPackSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerSubscriptionGetAll */
    private com.squareup.okhttp.Call customerSubscriptionGetAllCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerSubscriptionGetAll(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/subscription".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Get all the current subscriptions of a customer
     * @param customerId The given id from the user service (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> customerSubscriptionGetAll(String customerId) throws ApiException {
        ApiResponse<List<String>> resp = customerSubscriptionGetAllWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * 
     * Get all the current subscriptions of a customer
     * @param customerId The given id from the user service (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> customerSubscriptionGetAllWithHttpInfo(String customerId) throws ApiException {
        com.squareup.okhttp.Call call = customerSubscriptionGetAllCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the current subscriptions of a customer
     * @param customerId The given id from the user service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSubscriptionGetAllAsync(String customerId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSubscriptionGetAllCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerSubscriptionRenew */
    private com.squareup.okhttp.Call customerSubscriptionRenewCall(String customerId, String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerSubscriptionRenew(Async)");
        }
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customerSubscriptionRenew(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/renew".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "subscription-id" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String customerSubscriptionRenew(String customerId, String subscriptionId) throws ApiException {
        ApiResponse<String> resp = customerSubscriptionRenewWithHttpInfo(customerId, subscriptionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> customerSubscriptionRenewWithHttpInfo(String customerId, String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = customerSubscriptionRenewCall(customerId, subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param subscriptionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSubscriptionRenewAsync(String customerId, String subscriptionId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSubscriptionRenewCall(customerId, subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerSubscriptionSpend */
    private com.squareup.okhttp.Call customerSubscriptionSpendCall(String customerId, String customerSubscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerSubscriptionSpend(Async)");
        }
        
        // verify the required parameter 'customerSubscriptionId' is set
        if (customerSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'customerSubscriptionId' when calling customerSubscriptionSpend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/subscription/{customer-subscription-id}/spend".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()))
        .replaceAll("\\{" + "customer-subscription-id" + "\\}", apiClient.escapeString(customerSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param customerSubscriptionId  (required)
     * @return Map&lt;String, Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Long> customerSubscriptionSpend(String customerId, String customerSubscriptionId) throws ApiException {
        ApiResponse<Map<String, Long>> resp = customerSubscriptionSpendWithHttpInfo(customerId, customerSubscriptionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param customerSubscriptionId  (required)
     * @return ApiResponse&lt;Map&lt;String, Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Long>> customerSubscriptionSpendWithHttpInfo(String customerId, String customerSubscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = customerSubscriptionSpendCall(customerId, customerSubscriptionId, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param customerSubscriptionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSubscriptionSpendAsync(String customerId, String customerSubscriptionId, final ApiCallback<Map<String, Long>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSubscriptionSpendCall(customerId, customerSubscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerSubscriptionValues */
    private com.squareup.okhttp.Call customerSubscriptionValuesCall(String customerId, Integer page, Integer numberPerPage, Boolean loadDefaultUser, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerSubscriptionValues(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerSubscriptionValues(Async)");
        }
        
        // verify the required parameter 'numberPerPage' is set
        if (numberPerPage == null) {
            throw new ApiException("Missing the required parameter 'numberPerPage' when calling customerSubscriptionValues(Async)");
        }
        
        // verify the required parameter 'loadDefaultUser' is set
        if (loadDefaultUser == null) {
            throw new ApiException("Missing the required parameter 'loadDefaultUser' when calling customerSubscriptionValues(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/s4s-product/customer/{customer-id}/subscription/values".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer-id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (numberPerPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "number-per-page", numberPerPage));
        if (loadDefaultUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "load-default-user", loadDefaultUser));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadDefaultUser  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerSubscriptionValues(String customerId, Integer page, Integer numberPerPage, Boolean loadDefaultUser) throws ApiException {
        customerSubscriptionValuesWithHttpInfo(customerId, page, numberPerPage, loadDefaultUser);
    }

    /**
     * 
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadDefaultUser  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerSubscriptionValuesWithHttpInfo(String customerId, Integer page, Integer numberPerPage, Boolean loadDefaultUser) throws ApiException {
        com.squareup.okhttp.Call call = customerSubscriptionValuesCall(customerId, page, numberPerPage, loadDefaultUser, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId The given id from the user service (required)
     * @param page  (required)
     * @param numberPerPage  (required)
     * @param loadDefaultUser  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSubscriptionValuesAsync(String customerId, Integer page, Integer numberPerPage, Boolean loadDefaultUser, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSubscriptionValuesCall(customerId, page, numberPerPage, loadDefaultUser, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for productConfigGet */
    private com.squareup.okhttp.Call productConfigGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/s4s-product/productConfig".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @return ProductConf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductConf productConfigGet() throws ApiException {
        ApiResponse<ProductConf> resp = productConfigGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ProductConf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductConf> productConfigGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = productConfigGetCall(null, null);
        Type localVarReturnType = new TypeToken<ProductConf>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productConfigGetAsync(final ApiCallback<ProductConf> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productConfigGetCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProductConf>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for productConfigPut */
    private com.squareup.okhttp.Call productConfigPutCall(ProductConf a, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = a;
        

        // create path and map variables
        String localVarPath = "/s4s-product/productConfig".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "tenantid", "token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param a  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String productConfigPut(ProductConf a) throws ApiException {
        ApiResponse<String> resp = productConfigPutWithHttpInfo(a);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param a  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> productConfigPutWithHttpInfo(ProductConf a) throws ApiException {
        com.squareup.okhttp.Call call = productConfigPutCall(a, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param a  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productConfigPutAsync(ProductConf a, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productConfigPutCall(a, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
