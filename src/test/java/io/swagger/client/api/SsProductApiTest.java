/**
 * s4s-full
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.S4sError;
import io.swagger.client.model.CustomerPack;
import io.swagger.client.model.CustomerPackSubscription;
import io.swagger.client.model.ProductConf;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SsProductApi
 */
public class SsProductApiTest {

    private final SsProductApi api = new SsProductApi();

    
    /**
     * 
     *
     * Relationate a new product with the customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerEnjoyAddTest() throws ApiException {
        String customerId = null;
        Long expirationOffset = null;
        String overrideEnjoyId = null;
        String overrideSubscriptionId = null;
        CustomerPack newEnjoy = null;
        // CustomerPack response = api.customerEnjoyAdd(customerId, expirationOffset, overrideEnjoyId, overrideSubscriptionId, newEnjoy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Will close the enjoyId product, an create the the a new equivalent EnjoyProduct. Only refreshing the limits if its need
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerEnjoyCloseTest() throws ApiException {
        String customerId = null;
        String enjoyId = null;
        // CustomerPack response = api.customerEnjoyClose(customerId, enjoyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a certain product releated to customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerEnjoyGetTest() throws ApiException {
        String customerId = null;
        String enjoyId = null;
        // CustomerPack response = api.customerEnjoyGet(customerId, enjoyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all the current products relationed with the customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerEnjoyGetAllTest() throws ApiException {
        String customerId = null;
        // List<String> response = api.customerEnjoyGetAll(customerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerEnjoySpendTest() throws ApiException {
        String customerId = null;
        String customerPackId = null;
        // Map<String, Long> response = api.customerEnjoySpend(customerId, customerPackId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerEnjoyValuesTest() throws ApiException {
        String customerId = null;
        Integer page = null;
        Integer numberPerPage = null;
        Boolean loadResourceStatusList = null;
        // api.customerEnjoyValues(customerId, page, numberPerPage, loadResourceStatusList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerHistoryPackGetTest() throws ApiException {
        String customerId = null;
        String id = null;
        // CustomerPack response = api.customerHistoryPackGet(customerId, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerHistoryPackGetAllTest() throws ApiException {
        String customerId = null;
        // List<String> response = api.customerHistoryPackGetAll(customerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerHistoryPackValuesTest() throws ApiException {
        String customerId = null;
        Integer page = null;
        Integer numberPerPage = null;
        Boolean loadResourceStatusList = null;
        // api.customerHistoryPackValues(customerId, page, numberPerPage, loadResourceStatusList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerHistorySubscriptionGetTest() throws ApiException {
        String customerId = null;
        String id = null;
        // CustomerPack response = api.customerHistorySubscriptionGet(customerId, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerHistorySubscriptionGetAllTest() throws ApiException {
        String customerId = null;
        // List<String> response = api.customerHistorySubscriptionGetAll(customerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerHistorySubscriptionValuesTest() throws ApiException {
        String customerId = null;
        Integer page = null;
        Integer numberPerPage = null;
        Boolean loadResourceStatusList = null;
        // api.customerHistorySubscriptionValues(customerId, page, numberPerPage, loadResourceStatusList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerResourceTest() throws ApiException {
        String customerId = null;
        Integer page = null;
        Integer numberPerPage = null;
        // api.customerResource(customerId, page, numberPerPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new subscription to customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerSubscriptionAddTest() throws ApiException {
        String customerId = null;
        String overrideSubscriptionId = null;
        String overrideEnjoyId = null;
        CustomerPackSubscription newSubscription = null;
        // CustomerPackSubscription response = api.customerSubscriptionAdd(customerId, overrideSubscriptionId, overrideEnjoyId, newSubscription);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerSubscriptionCloseTest() throws ApiException {
        String customerId = null;
        String subscriptionId = null;
        // String response = api.customerSubscriptionClose(customerId, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a subscription by its Ids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerSubscriptionGetTest() throws ApiException {
        String customerId = null;
        String subscriptionId = null;
        // CustomerPackSubscription response = api.customerSubscriptionGet(customerId, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all the current subscriptions of a customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerSubscriptionGetAllTest() throws ApiException {
        String customerId = null;
        // List<String> response = api.customerSubscriptionGetAll(customerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerSubscriptionRenewTest() throws ApiException {
        String customerId = null;
        String subscriptionId = null;
        // String response = api.customerSubscriptionRenew(customerId, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerSubscriptionSpendTest() throws ApiException {
        String customerId = null;
        String customerSubscriptionId = null;
        // Map<String, Long> response = api.customerSubscriptionSpend(customerId, customerSubscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerSubscriptionValuesTest() throws ApiException {
        String customerId = null;
        Integer page = null;
        Integer numberPerPage = null;
        Boolean loadDefaultUser = null;
        // api.customerSubscriptionValues(customerId, page, numberPerPage, loadDefaultUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productConfigGetTest() throws ApiException {
        // ProductConf response = api.productConfigGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productConfigPutTest() throws ApiException {
        ProductConf a = null;
        // String response = api.productConfigPut(a);

        // TODO: test validations
    }
    
}
